
npham014_Lab4_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d8  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e3  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000373  00000000  00000000  000013fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8e d0       	rcall	.+284    	; 0x1c6 <main>
  aa:	c1 c0       	rjmp	.+386    	; 0x22e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <counterSM>:
 */ 

#include <avr/io.h>
enum state {NONE,INCREASING,DECREASING,INCPUSHED,DECPUSHED,BOTHPUSHED} currState = NONE;

unsigned char counterSM(unsigned char incr, unsigned char decr, unsigned char output) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <counterSM+0x6>
  b4:	1f 92       	push	r1
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	6a 83       	std	Y+2, r22	; 0x02
  be:	4b 83       	std	Y+3, r20	; 0x03
	switch(currState) {
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	31 f1       	breq	.+76     	; 0x11a <counterSM+0x6c>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	91 05       	cpc	r25, r1
  d2:	2c f4       	brge	.+10     	; 0xde <counterSM+0x30>
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	61 f0       	breq	.+24     	; 0xf0 <counterSM+0x42>
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	d9 f0       	breq	.+54     	; 0x112 <counterSM+0x64>
  dc:	56 c0       	rjmp	.+172    	; 0x18a <counterSM+0xdc>
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	91 05       	cpc	r25, r1
  e2:	81 f1       	breq	.+96     	; 0x144 <counterSM+0x96>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	91 05       	cpc	r25, r1
  e8:	e4 f0       	brlt	.+56     	; 0x122 <counterSM+0x74>
  ea:	05 97       	sbiw	r24, 0x05	; 5
  ec:	e1 f1       	breq	.+120    	; 0x166 <counterSM+0xb8>
  ee:	4d c0       	rjmp	.+154    	; 0x18a <counterSM+0xdc>
		case NONE:
			if(incr == 1) {
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	21 f4       	brne	.+8      	; 0xfe <counterSM+0x50>
				currState = INCREASING;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				currState = DECREASING;
			}
			else {
				currState = NONE;
			}
			break;
  fc:	49 c0       	rjmp	.+146    	; 0x190 <counterSM+0xe2>
	switch(currState) {
		case NONE:
			if(incr == 1) {
				currState = INCREASING;
			}
			else if(decr == 1) {
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	21 f4       	brne	.+8      	; 0x10c <counterSM+0x5e>
				currState = DECREASING;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else {
				currState = NONE;
			}
			break;
 10a:	42 c0       	rjmp	.+132    	; 0x190 <counterSM+0xe2>
			}
			else if(decr == 1) {
				currState = DECREASING;
			}
			else {
				currState = NONE;
 10c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			break;
 110:	3f c0       	rjmp	.+126    	; 0x190 <counterSM+0xe2>
		case INCREASING:
			currState = INCPUSHED;
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 118:	3b c0       	rjmp	.+118    	; 0x190 <counterSM+0xe2>
		case DECREASING:
			currState = DECPUSHED;
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 120:	37 c0       	rjmp	.+110    	; 0x190 <counterSM+0xe2>
		case INCPUSHED:
			if(incr != 1) {
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	19 f0       	breq	.+6      	; 0x12e <counterSM+0x80>
				currState = NONE;
 128:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				currState = BOTHPUSHED;
			}
			else {
				currState = INCPUSHED;
			}
			break;
 12c:	31 c0       	rjmp	.+98     	; 0x190 <counterSM+0xe2>
			break;
		case INCPUSHED:
			if(incr != 1) {
				currState = NONE;
			}
			else if(decr == 1) {
 12e:	8a 81       	ldd	r24, Y+2	; 0x02
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	21 f4       	brne	.+8      	; 0x13c <counterSM+0x8e>
				currState = BOTHPUSHED;
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else {
				currState = INCPUSHED;
			}
			break;
 13a:	2a c0       	rjmp	.+84     	; 0x190 <counterSM+0xe2>
			}
			else if(decr == 1) {
				currState = BOTHPUSHED;
			}
			else {
				currState = INCPUSHED;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 142:	26 c0       	rjmp	.+76     	; 0x190 <counterSM+0xe2>
		case DECPUSHED:
			if(decr != 1) {
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	19 f0       	breq	.+6      	; 0x150 <counterSM+0xa2>
				currState = NONE;
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				currState = BOTHPUSHED;
			}
			else {
				currState = DECPUSHED;
			}
			break;
 14e:	20 c0       	rjmp	.+64     	; 0x190 <counterSM+0xe2>
			break;
		case DECPUSHED:
			if(decr != 1) {
				currState = NONE;
			}
			else if(incr == 1) {
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	21 f4       	brne	.+8      	; 0x15e <counterSM+0xb0>
				currState = BOTHPUSHED;
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else {
				currState = DECPUSHED;
			}
			break;
 15c:	19 c0       	rjmp	.+50     	; 0x190 <counterSM+0xe2>
			}
			else if(incr == 1) {
				currState = BOTHPUSHED;
			}
			else {
				currState = DECPUSHED;
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 164:	15 c0       	rjmp	.+42     	; 0x190 <counterSM+0xe2>
		case BOTHPUSHED:
			if(incr != 1) {
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	21 f0       	breq	.+8      	; 0x174 <counterSM+0xc6>
				currState = DECPUSHED;
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				currState = INCPUSHED;
			}
			else {
				currState = BOTHPUSHED;
			}
			break;
 172:	0e c0       	rjmp	.+28     	; 0x190 <counterSM+0xe2>
			break;
		case BOTHPUSHED:
			if(incr != 1) {
				currState = DECPUSHED;
			}
			else if(decr != 1) {
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	21 f0       	breq	.+8      	; 0x182 <counterSM+0xd4>
				currState = INCPUSHED;
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else {
				currState = BOTHPUSHED;
			}
			break;
 180:	07 c0       	rjmp	.+14     	; 0x190 <counterSM+0xe2>
			}
			else if(decr != 1) {
				currState = INCPUSHED;
			}
			else {
				currState = BOTHPUSHED;
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 188:	03 c0       	rjmp	.+6      	; 0x190 <counterSM+0xe2>
		default:
			currState = NONE;
 18a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;	
 18e:	00 00       	nop
	}
	
	switch (currState) {
 190:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 194:	88 2f       	mov	r24, r24
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	91 05       	cpc	r25, r1
 19c:	41 f0       	breq	.+16     	; 0x1ae <counterSM+0x100>
 19e:	85 30       	cpi	r24, 0x05	; 5
 1a0:	91 05       	cpc	r25, r1
 1a2:	41 f0       	breq	.+16     	; 0x1b4 <counterSM+0x106>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <counterSM+0x10a>
		case INCREASING:
			return output + 1;
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <counterSM+0x10c>
			break;
		case DECREASING:
			return output - 1;
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	81 50       	subi	r24, 0x01	; 1
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <counterSM+0x10c>
			break;
		case BOTHPUSHED:
			return 0;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <counterSM+0x10c>
			break;
		default:
			return output;
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
	}
	
}
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <main>:

int main(void)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <main+0x6>
 1cc:	1f 92       	push	r1
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 1d2:	81 e2       	ldi	r24, 0x21	; 33
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	10 82       	st	Z, r1
 1da:	82 e2       	ldi	r24, 0x22	; 34
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 1e4:	87 e2       	ldi	r24, 0x27	; 39
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
 1ee:	88 e2       	ldi	r24, 0x28	; 40
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	10 82       	st	Z, r1
	unsigned char incButton = 0x00;
 1f6:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char decButton = 0x00;
 1f8:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char currVal = 0x07;
 1fa:	87 e0       	ldi	r24, 0x07	; 7
 1fc:	89 83       	std	Y+1, r24	; 0x01
    while (1) 
    {
		incButton = PINA % 2;
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	80 81       	ld	r24, Z
 206:	81 70       	andi	r24, 0x01	; 1
 208:	8a 83       	std	Y+2, r24	; 0x02
		decButton = (PINA>>1) %2;
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	80 81       	ld	r24, Z
 212:	86 95       	lsr	r24
 214:	81 70       	andi	r24, 0x01	; 1
 216:	8b 83       	std	Y+3, r24	; 0x03
		currVal = counterSM(incButton,decButton, currVal);
 218:	49 81       	ldd	r20, Y+1	; 0x01
 21a:	6b 81       	ldd	r22, Y+3	; 0x03
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	47 df       	rcall	.-370    	; 0xae <counterSM>
 220:	89 83       	std	Y+1, r24	; 0x01
		PORTC = currVal;
 222:	88 e2       	ldi	r24, 0x28	; 40
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	29 81       	ldd	r18, Y+1	; 0x01
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
    }
 22c:	e8 cf       	rjmp	.-48     	; 0x1fe <main+0x38>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
