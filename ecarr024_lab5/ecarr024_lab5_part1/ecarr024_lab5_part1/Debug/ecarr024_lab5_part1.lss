
ecarr024_lab5_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a18  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037d  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022c  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3f c0       	rjmp	.+126    	; 0x11a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
unsigned char GetBit(unsigned char x, unsigned char k) {
    return ((x & (0x01 << k)) != 0);
}

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // A is input
  a8:	11 b8       	out	0x01, r1	; 1
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // B is output
  ae:	84 b9       	out	0x04, r24	; 4
  b0:	15 b8       	out	0x05, r1	; 5
	
	volatile unsigned char fuelValue = 0x00;
  b2:	19 82       	std	Y+1, r1	; 0x01
	volatile unsigned char tmpB = 0x00;
  b4:	1a 82       	std	Y+2, r1	; 0x02
    
    while (1) 
    {
		
		// Read input
		fuelValue = (~PINA) & 0x0F; // PA3..PA0
  b6:	80 b1       	in	r24, 0x00	; 0
  b8:	80 95       	com	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 83       	std	Y+1, r24	; 0x01
		tmpB = 0x00;
  be:	1a 82       	std	Y+2, r1	; 0x02
		//	level 5-6	PC5 PC4 PC3
		//	level 7-9	PC5 PC4 PC3 PC2
		//	level 10-12	PC5 PC4 PC3 PC2 PC1
		//	level 13-15 PC5 PC4 PC3 PC2 PC1 PC0
		
		if (fuelValue >= 13) tmpB = SetBit(tmpB, 0, 1);
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	8d 30       	cpi	r24, 0x0D	; 13
  c4:	18 f0       	brcs	.+6      	; 0xcc <main+0x2e>
  c6:	8a 81       	ldd	r24, Y+2	; 0x02

#include <avr/io.h>

// Bit access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c8:	81 60       	ori	r24, 0x01	; 1
		//	level 5-6	PC5 PC4 PC3
		//	level 7-9	PC5 PC4 PC3 PC2
		//	level 10-12	PC5 PC4 PC3 PC2 PC1
		//	level 13-15 PC5 PC4 PC3 PC2 PC1 PC0
		
		if (fuelValue >= 13) tmpB = SetBit(tmpB, 0, 1);
  ca:	8a 83       	std	Y+2, r24	; 0x02
		if (fuelValue >= 10) tmpB = SetBit(tmpB, 1, 1);
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	8a 30       	cpi	r24, 0x0A	; 10
  d0:	18 f0       	brcs	.+6      	; 0xd8 <main+0x3a>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02

#include <avr/io.h>

// Bit access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  d4:	82 60       	ori	r24, 0x02	; 2
		//	level 7-9	PC5 PC4 PC3 PC2
		//	level 10-12	PC5 PC4 PC3 PC2 PC1
		//	level 13-15 PC5 PC4 PC3 PC2 PC1 PC0
		
		if (fuelValue >= 13) tmpB = SetBit(tmpB, 0, 1);
		if (fuelValue >= 10) tmpB = SetBit(tmpB, 1, 1);
  d6:	8a 83       	std	Y+2, r24	; 0x02
		if (fuelValue >= 7)  tmpB = SetBit(tmpB, 2, 1);
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	87 30       	cpi	r24, 0x07	; 7
  dc:	18 f0       	brcs	.+6      	; 0xe4 <main+0x46>
  de:	8a 81       	ldd	r24, Y+2	; 0x02

#include <avr/io.h>

// Bit access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  e0:	84 60       	ori	r24, 0x04	; 4
		//	level 10-12	PC5 PC4 PC3 PC2 PC1
		//	level 13-15 PC5 PC4 PC3 PC2 PC1 PC0
		
		if (fuelValue >= 13) tmpB = SetBit(tmpB, 0, 1);
		if (fuelValue >= 10) tmpB = SetBit(tmpB, 1, 1);
		if (fuelValue >= 7)  tmpB = SetBit(tmpB, 2, 1);
  e2:	8a 83       	std	Y+2, r24	; 0x02
		if (fuelValue >= 5)  tmpB = SetBit(tmpB, 3, 1);
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	85 30       	cpi	r24, 0x05	; 5
  e8:	18 f0       	brcs	.+6      	; 0xf0 <main+0x52>
  ea:	8a 81       	ldd	r24, Y+2	; 0x02

#include <avr/io.h>

// Bit access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ec:	88 60       	ori	r24, 0x08	; 8
		//	level 13-15 PC5 PC4 PC3 PC2 PC1 PC0
		
		if (fuelValue >= 13) tmpB = SetBit(tmpB, 0, 1);
		if (fuelValue >= 10) tmpB = SetBit(tmpB, 1, 1);
		if (fuelValue >= 7)  tmpB = SetBit(tmpB, 2, 1);
		if (fuelValue >= 5)  tmpB = SetBit(tmpB, 3, 1);
  ee:	8a 83       	std	Y+2, r24	; 0x02
		if (fuelValue >= 3)  tmpB = SetBit(tmpB, 4, 1);
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	18 f0       	brcs	.+6      	; 0xfc <main+0x5e>
  f6:	8a 81       	ldd	r24, Y+2	; 0x02

#include <avr/io.h>

// Bit access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  f8:	80 61       	ori	r24, 0x10	; 16
		
		if (fuelValue >= 13) tmpB = SetBit(tmpB, 0, 1);
		if (fuelValue >= 10) tmpB = SetBit(tmpB, 1, 1);
		if (fuelValue >= 7)  tmpB = SetBit(tmpB, 2, 1);
		if (fuelValue >= 5)  tmpB = SetBit(tmpB, 3, 1);
		if (fuelValue >= 3)  tmpB = SetBit(tmpB, 4, 1);
  fa:	8a 83       	std	Y+2, r24	; 0x02
		if (fuelValue >= 1)  tmpB = SetBit(tmpB, 5, 1);
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	88 23       	and	r24, r24
 100:	19 f0       	breq	.+6      	; 0x108 <main+0x6a>
 102:	8a 81       	ldd	r24, Y+2	; 0x02

#include <avr/io.h>

// Bit access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 104:	80 62       	ori	r24, 0x20	; 32
		if (fuelValue >= 13) tmpB = SetBit(tmpB, 0, 1);
		if (fuelValue >= 10) tmpB = SetBit(tmpB, 1, 1);
		if (fuelValue >= 7)  tmpB = SetBit(tmpB, 2, 1);
		if (fuelValue >= 5)  tmpB = SetBit(tmpB, 3, 1);
		if (fuelValue >= 3)  tmpB = SetBit(tmpB, 4, 1);
		if (fuelValue >= 1)  tmpB = SetBit(tmpB, 5, 1);
 106:	8a 83       	std	Y+2, r24	; 0x02
		if (fuelValue <= 4)  tmpB = SetBit(tmpB, 6, 1); // Low fuel icon
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	85 30       	cpi	r24, 0x05	; 5
 10c:	18 f4       	brcc	.+6      	; 0x114 <main+0x76>
 10e:	8a 81       	ldd	r24, Y+2	; 0x02

#include <avr/io.h>

// Bit access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
    return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 110:	80 64       	ori	r24, 0x40	; 64
		if (fuelValue >= 10) tmpB = SetBit(tmpB, 1, 1);
		if (fuelValue >= 7)  tmpB = SetBit(tmpB, 2, 1);
		if (fuelValue >= 5)  tmpB = SetBit(tmpB, 3, 1);
		if (fuelValue >= 3)  tmpB = SetBit(tmpB, 4, 1);
		if (fuelValue >= 1)  tmpB = SetBit(tmpB, 5, 1);
		if (fuelValue <= 4)  tmpB = SetBit(tmpB, 6, 1); // Low fuel icon
 112:	8a 83       	std	Y+2, r24	; 0x02
		
		// Write output
		
		PORTB = tmpB; // 0000 0101
 114:	8a 81       	ldd	r24, Y+2	; 0x02
 116:	85 b9       	out	0x05, r24	; 5
    }
 118:	ce cf       	rjmp	.-100    	; 0xb6 <main+0x18>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
