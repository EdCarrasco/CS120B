
ecarr024_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000914  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fc  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c6  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8d 00       	.word	0x008d	; ????
  8e:	90 00       	.word	0x0090	; ????
  90:	ad 00       	.word	0x00ad	; ????
  92:	b3 00       	.word	0x00b3	; ????
  94:	b0 00       	.word	0x00b0	; ????
  96:	c8 00       	.word	0x00c8	; ????
  98:	dd 00       	.word	0x00dd	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a1 30       	cpi	r26, 0x01	; 1
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	02 d0       	rcall	.+4      	; 0xbc <main>
  b8:	a8 c0       	rjmp	.+336    	; 0x20a <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <main>:
	decreaseWait,
	bothPressed
} Button_State;

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0x6>
  c2:	1f 92       	push	r1
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // A input
  c8:	11 b8       	out	0x01, r1	; 1
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // B output
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	15 b8       	out	0x05, r1	; 5
	
	volatile unsigned char tmpB = 7;
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	89 83       	std	Y+1, r24	; 0x01
	volatile unsigned char buttonIncrease = 0x00;
  d6:	1a 82       	std	Y+2, r1	; 0x02
	volatile unsigned char buttonDecrease = 0x00;
  d8:	1b 82       	std	Y+3, r1	; 0x03
	Button_State = start;
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
	while (1)
	{
		buttonIncrease = (~PINA) & 0x01; // PA0
  de:	21 e0       	ldi	r18, 0x01	; 1
				break;
		}
		
		switch(Button_State) { // actions
			case start:
				tmpB = 7;
  e0:	57 e0       	ldi	r21, 0x07	; 7
				break;
			case decreaseWait:
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
					} else if (buttonIncrease) {
					Button_State = bothPressed; // maybe go to nonePressed or increasePressed instead?
  e2:	66 e0       	ldi	r22, 0x06	; 6
				break;
			case increasePressed:
				Button_State = increaseWait;
				break;
			case decreasePressed:
				Button_State = decreaseWait;
  e4:	15 e0       	ldi	r17, 0x05	; 5
					} else {
					Button_State = nonePressed;
				}
				break;
			case increasePressed:
				Button_State = increaseWait;
  e6:	73 e0       	ldi	r23, 0x03	; 3
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
					} else if (buttonIncrease) {
					Button_State = increasePressed;
					} else if (buttonDecrease) {
					Button_State = decreasePressed;
  e8:	44 e0       	ldi	r20, 0x04	; 4
				break;
			case nonePressed:
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
					} else if (buttonIncrease) {
					Button_State = increasePressed;
  ea:	32 e0       	ldi	r19, 0x02	; 2
	volatile unsigned char buttonDecrease = 0x00;
	Button_State = start;
	
	while (1)
	{
		buttonIncrease = (~PINA) & 0x01; // PA0
  ec:	80 b1       	in	r24, 0x00	; 0
  ee:	82 27       	eor	r24, r18
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	8a 83       	std	Y+2, r24	; 0x02
		buttonDecrease = ((~PINA) & 0x02) >> 1; // PA1
  f4:	80 b1       	in	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	80 95       	com	r24
  fa:	90 95       	com	r25
  fc:	86 95       	lsr	r24
  fe:	81 70       	andi	r24, 0x01	; 1
 100:	8b 83       	std	Y+3, r24	; 0x03
		
		switch(Button_State) { // transitions
 102:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 106:	8e 2f       	mov	r24, r30
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	87 30       	cpi	r24, 0x07	; 7
 10c:	91 05       	cpc	r25, r1
 10e:	08 f0       	brcs	.+2      	; 0x112 <main+0x56>
 110:	63 c0       	rjmp	.+198    	; 0x1d8 <main+0x11c>
 112:	fc 01       	movw	r30, r24
 114:	ea 5b       	subi	r30, 0xBA	; 186
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	6f c0       	rjmp	.+222    	; 0x1f8 <__tablejump2__>
			case start:
				Button_State = nonePressed;
 11a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
				break;
 11e:	67 c0       	rjmp	.+206    	; 0x1ee <main+0x132>
			case nonePressed:
				if (buttonIncrease && buttonDecrease) {
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <main+0x76>
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	88 23       	and	r24, r24
 12a:	19 f0       	breq	.+6      	; 0x132 <main+0x76>
					Button_State = bothPressed;
 12c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 130:	61 c0       	rjmp	.+194    	; 0x1f4 <main+0x138>
					} else if (buttonIncrease) {
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	88 23       	and	r24, r24
 136:	39 f0       	breq	.+14     	; 0x146 <main+0x8a>
					Button_State = increasePressed;
 138:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <_edata>
			case increaseWait:
			case decreaseWait:
				// do nothing
				break;
			case increasePressed:
				if (tmpB < 9) tmpB++;
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	89 30       	cpi	r24, 0x09	; 9
 140:	08 f4       	brcc	.+2      	; 0x144 <main+0x88>
 142:	4e c0       	rjmp	.+156    	; 0x1e0 <main+0x124>
 144:	54 c0       	rjmp	.+168    	; 0x1ee <main+0x132>
			case nonePressed:
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
					} else if (buttonIncrease) {
					Button_State = increasePressed;
					} else if (buttonDecrease) {
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	88 23       	and	r24, r24
 14a:	09 f4       	brne	.+2      	; 0x14e <main+0x92>
 14c:	50 c0       	rjmp	.+160    	; 0x1ee <main+0x132>
					Button_State = decreasePressed;
 14e:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
				break;
			case increasePressed:
				if (tmpB < 9) tmpB++;
				break;
			case decreasePressed:
				if (tmpB > 0) tmpB--;
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	81 11       	cpse	r24, r1
 156:	48 c0       	rjmp	.+144    	; 0x1e8 <main+0x12c>
 158:	4a c0       	rjmp	.+148    	; 0x1ee <main+0x132>
					} else {
					Button_State = nonePressed;
				}
				break;
			case increasePressed:
				Button_State = increaseWait;
 15a:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <_edata>
				break;
 15e:	47 c0       	rjmp	.+142    	; 0x1ee <main+0x132>
			case decreasePressed:
				Button_State = decreaseWait;
 160:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <_edata>
				break;
 164:	44 c0       	rjmp	.+136    	; 0x1ee <main+0x132>
			case increaseWait:
				if (buttonIncrease && buttonDecrease) {
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	88 23       	and	r24, r24
 16a:	31 f0       	breq	.+12     	; 0x178 <main+0xbc>
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	88 23       	and	r24, r24
 170:	19 f0       	breq	.+6      	; 0x178 <main+0xbc>
					Button_State = bothPressed;
 172:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 176:	3e c0       	rjmp	.+124    	; 0x1f4 <main+0x138>
					} else if (buttonIncrease) {
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	81 11       	cpse	r24, r1
 17c:	38 c0       	rjmp	.+112    	; 0x1ee <main+0x132>
					Button_State = increaseWait;
					} else if (buttonDecrease) {
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	88 23       	and	r24, r24
 182:	19 f0       	breq	.+6      	; 0x18a <main+0xce>
					Button_State = bothPressed; // maybe go to nonePressed or decreasePressed instead?
 184:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 188:	35 c0       	rjmp	.+106    	; 0x1f4 <main+0x138>
					} else {
					Button_State = nonePressed;
 18a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 18e:	2f c0       	rjmp	.+94     	; 0x1ee <main+0x132>
				}
				break;
			case decreaseWait:
				if (buttonIncrease && buttonDecrease) {
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 23       	and	r24, r24
 194:	31 f0       	breq	.+12     	; 0x1a2 <main+0xe6>
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	88 23       	and	r24, r24
 19a:	19 f0       	breq	.+6      	; 0x1a2 <main+0xe6>
					Button_State = bothPressed;
 19c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 1a0:	29 c0       	rjmp	.+82     	; 0x1f4 <main+0x138>
					} else if (buttonIncrease) {
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	88 23       	and	r24, r24
 1a6:	19 f0       	breq	.+6      	; 0x1ae <main+0xf2>
					Button_State = bothPressed; // maybe go to nonePressed or increasePressed instead?
 1a8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 1ac:	23 c0       	rjmp	.+70     	; 0x1f4 <main+0x138>
					} else if (buttonDecrease) {
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	81 11       	cpse	r24, r1
 1b2:	1d c0       	rjmp	.+58     	; 0x1ee <main+0x132>
					Button_State = decreaseWait;
					} else {
					Button_State = nonePressed;
 1b4:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 1b8:	1a c0       	rjmp	.+52     	; 0x1ee <main+0x132>
				}
				break;
			case bothPressed:
				if (buttonIncrease && buttonDecrease) {
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	88 23       	and	r24, r24
 1be:	19 f0       	breq	.+6      	; 0x1c6 <main+0x10a>
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	81 11       	cpse	r24, r1
 1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <main+0x138>
					Button_State = bothPressed;
					} else if (buttonIncrease) {
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	81 11       	cpse	r24, r1
 1ca:	14 c0       	rjmp	.+40     	; 0x1f4 <main+0x138>
					Button_State = bothPressed;
					} else if (buttonDecrease) {
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	81 11       	cpse	r24, r1
 1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <main+0x138>
					Button_State = bothPressed;
					} else {
					Button_State = nonePressed;
 1d2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <main+0x132>
				}
				break;
			default:
				Button_State = start;
 1d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				break;
		}
		
		switch(Button_State) { // actions
			case start:
				tmpB = 7;
 1dc:	59 83       	std	Y+1, r21	; 0x01
				break;
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <main+0x132>
			case increaseWait:
			case decreaseWait:
				// do nothing
				break;
			case increasePressed:
				if (tmpB < 9) tmpB++;
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	89 83       	std	Y+1, r24	; 0x01
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <main+0x132>
				break;
			case decreasePressed:
				if (tmpB > 0) tmpB--;
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	81 50       	subi	r24, 0x01	; 1
 1ec:	89 83       	std	Y+1, r24	; 0x01
				tmpB = 0xFF; // should never happen
			break;
		}
		
		// Write to output
		PORTB = tmpB;
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	85 b9       	out	0x05, r24	; 5
	}
 1f2:	7c cf       	rjmp	.-264    	; 0xec <main+0x30>
				break;
			case decreasePressed:
				if (tmpB > 0) tmpB--;
				break;
			case bothPressed:
				tmpB = 0;
 1f4:	19 82       	std	Y+1, r1	; 0x01
				break;
 1f6:	fb cf       	rjmp	.-10     	; 0x1ee <main+0x132>

000001f8 <__tablejump2__>:
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	00 24       	eor	r0, r0
 1fe:	00 1c       	adc	r0, r0
 200:	0b be       	out	0x3b, r0	; 59
 202:	07 90       	elpm	r0, Z+
 204:	f6 91       	elpm	r31, Z
 206:	e0 2d       	mov	r30, r0
 208:	09 94       	ijmp

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
