
ecarr024_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000027a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089b  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c2  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000374  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	89 00       	.word	0x0089	; ????
  8e:	8c 00       	.word	0x008c	; ????
  90:	a9 00       	.word	0x00a9	; ????
  92:	af 00       	.word	0x00af	; ????
  94:	ac 00       	.word	0x00ac	; ????
  96:	c4 00       	.word	0x00c4	; ????
  98:	d9 00       	.word	0x00d9	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a1 30       	cpi	r26, 0x01	; 1
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	02 d0       	rcall	.+4      	; 0xbc <main>
  b8:	a4 c0       	rjmp	.+328    	; 0x202 <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <main>:
	decreaseWait,
	bothPressed
} Button_State;

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0x6>
  c2:	1f 92       	push	r1
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // A input
  c8:	11 b8       	out	0x01, r1	; 1
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // C output
  ce:	87 b9       	out	0x07, r24	; 7
  d0:	18 b8       	out	0x08, r1	; 8
	
	volatile unsigned char tmpC = 7;
  d2:	87 e0       	ldi	r24, 0x07	; 7
  d4:	89 83       	std	Y+1, r24	; 0x01
	volatile unsigned char buttonIncrease = 0x00;
  d6:	1a 82       	std	Y+2, r1	; 0x02
	volatile unsigned char buttonDecrease = 0x00;
  d8:	1b 82       	std	Y+3, r1	; 0x03
	Button_State = start;
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				break;
		}
		
		switch(Button_State) { // actions
			case start:
				tmpC = 7;
  de:	57 e0       	ldi	r21, 0x07	; 7
				} else if (buttonIncrease) {
					Button_State = bothPressed;
				} else if (buttonDecrease) {
					Button_State = bothPressed;
				} else {
					Button_State = nonePressed;
  e0:	21 e0       	ldi	r18, 0x01	; 1
				break;
			case decreaseWait:
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
				} else if (buttonIncrease) {
					Button_State = bothPressed; // CORRECT???
  e2:	66 e0       	ldi	r22, 0x06	; 6
				break;
			case increasePressed:
				Button_State = increaseWait;
				break;
			case decreasePressed:
				Button_State = decreaseWait;
  e4:	15 e0       	ldi	r17, 0x05	; 5
				} else {
					Button_State = nonePressed;
				}
				break;
			case increasePressed:
				Button_State = increaseWait;
  e6:	73 e0       	ldi	r23, 0x03	; 3
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
				} else if (buttonIncrease) {
					Button_State = increasePressed;
				} else if (buttonDecrease) {
					Button_State = decreasePressed;
  e8:	44 e0       	ldi	r20, 0x04	; 4
				break;
			case nonePressed:
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
				} else if (buttonIncrease) {
					Button_State = increasePressed;
  ea:	32 e0       	ldi	r19, 0x02	; 2
	volatile unsigned char buttonDecrease = 0x00;
	Button_State = start;
	
	while (1)
	{
		buttonIncrease = PINA & 0x01; // PA0
  ec:	80 b1       	in	r24, 0x00	; 0
  ee:	81 70       	andi	r24, 0x01	; 1
  f0:	8a 83       	std	Y+2, r24	; 0x02
		buttonDecrease = (PINA & 0x02) >> 1; // PA1
  f2:	80 b1       	in	r24, 0x00	; 0
  f4:	86 95       	lsr	r24
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	8b 83       	std	Y+3, r24	; 0x03
		
		switch(Button_State) { // transitions
  fa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  fe:	8e 2f       	mov	r24, r30
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	87 30       	cpi	r24, 0x07	; 7
 104:	91 05       	cpc	r25, r1
 106:	08 f0       	brcs	.+2      	; 0x10a <main+0x4e>
 108:	63 c0       	rjmp	.+198    	; 0x1d0 <main+0x114>
 10a:	fc 01       	movw	r30, r24
 10c:	ea 5b       	subi	r30, 0xBA	; 186
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	6f c0       	rjmp	.+222    	; 0x1f0 <__tablejump2__>
			case start:
				Button_State = nonePressed;
 112:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
				break;
 116:	67 c0       	rjmp	.+206    	; 0x1e6 <main+0x12a>
			case nonePressed:
				if (buttonIncrease && buttonDecrease) {
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	88 23       	and	r24, r24
 11c:	31 f0       	breq	.+12     	; 0x12a <main+0x6e>
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	88 23       	and	r24, r24
 122:	19 f0       	breq	.+6      	; 0x12a <main+0x6e>
					Button_State = bothPressed;
 124:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 128:	61 c0       	rjmp	.+194    	; 0x1ec <main+0x130>
				} else if (buttonIncrease) {
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	88 23       	and	r24, r24
 12e:	39 f0       	breq	.+14     	; 0x13e <main+0x82>
					Button_State = increasePressed;
 130:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <_edata>
			case increaseWait:
			case decreaseWait:
				// do nothing
				break;
			case increasePressed:
				if (tmpC < 9) tmpC++;
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	89 30       	cpi	r24, 0x09	; 9
 138:	08 f4       	brcc	.+2      	; 0x13c <main+0x80>
 13a:	4e c0       	rjmp	.+156    	; 0x1d8 <main+0x11c>
 13c:	54 c0       	rjmp	.+168    	; 0x1e6 <main+0x12a>
			case nonePressed:
				if (buttonIncrease && buttonDecrease) {
					Button_State = bothPressed;
				} else if (buttonIncrease) {
					Button_State = increasePressed;
				} else if (buttonDecrease) {
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	88 23       	and	r24, r24
 142:	09 f4       	brne	.+2      	; 0x146 <main+0x8a>
 144:	50 c0       	rjmp	.+160    	; 0x1e6 <main+0x12a>
					Button_State = decreasePressed;
 146:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
				break;
			case increasePressed:
				if (tmpC < 9) tmpC++;
				break;
			case decreasePressed:
				if (tmpC > 0) tmpC--;
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	81 11       	cpse	r24, r1
 14e:	48 c0       	rjmp	.+144    	; 0x1e0 <main+0x124>
 150:	4a c0       	rjmp	.+148    	; 0x1e6 <main+0x12a>
				} else {
					Button_State = nonePressed;
				}
				break;
			case increasePressed:
				Button_State = increaseWait;
 152:	70 93 00 01 	sts	0x0100, r23	; 0x800100 <_edata>
				break;
 156:	47 c0       	rjmp	.+142    	; 0x1e6 <main+0x12a>
			case decreasePressed:
				Button_State = decreaseWait;
 158:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <_edata>
				break;
 15c:	44 c0       	rjmp	.+136    	; 0x1e6 <main+0x12a>
			case increaseWait:
				if (buttonIncrease && buttonDecrease) {
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	88 23       	and	r24, r24
 162:	31 f0       	breq	.+12     	; 0x170 <main+0xb4>
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	88 23       	and	r24, r24
 168:	19 f0       	breq	.+6      	; 0x170 <main+0xb4>
					Button_State = bothPressed;
 16a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 16e:	3e c0       	rjmp	.+124    	; 0x1ec <main+0x130>
				} else if (buttonIncrease) {
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	81 11       	cpse	r24, r1
 174:	38 c0       	rjmp	.+112    	; 0x1e6 <main+0x12a>
					Button_State = increaseWait;
				} else if (buttonDecrease) {
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	88 23       	and	r24, r24
 17a:	19 f0       	breq	.+6      	; 0x182 <main+0xc6>
					Button_State = bothPressed; // CORRECT???
 17c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 180:	35 c0       	rjmp	.+106    	; 0x1ec <main+0x130>
				} else {
					Button_State = nonePressed;
 182:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 186:	2f c0       	rjmp	.+94     	; 0x1e6 <main+0x12a>
				}
				break;
			case decreaseWait:
				if (buttonIncrease && buttonDecrease) {
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	88 23       	and	r24, r24
 18c:	31 f0       	breq	.+12     	; 0x19a <main+0xde>
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	88 23       	and	r24, r24
 192:	19 f0       	breq	.+6      	; 0x19a <main+0xde>
					Button_State = bothPressed;
 194:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 198:	29 c0       	rjmp	.+82     	; 0x1ec <main+0x130>
				} else if (buttonIncrease) {
 19a:	8a 81       	ldd	r24, Y+2	; 0x02
 19c:	88 23       	and	r24, r24
 19e:	19 f0       	breq	.+6      	; 0x1a6 <main+0xea>
					Button_State = bothPressed; // CORRECT???
 1a0:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 1a4:	23 c0       	rjmp	.+70     	; 0x1ec <main+0x130>
				} else if (buttonDecrease) {
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	81 11       	cpse	r24, r1
 1aa:	1d c0       	rjmp	.+58     	; 0x1e6 <main+0x12a>
					Button_State = decreaseWait;
				} else {
					Button_State = nonePressed;
 1ac:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 1b0:	1a c0       	rjmp	.+52     	; 0x1e6 <main+0x12a>
				}
				break;
			case bothPressed:
				if (buttonIncrease && buttonDecrease) {
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	88 23       	and	r24, r24
 1b6:	19 f0       	breq	.+6      	; 0x1be <main+0x102>
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	81 11       	cpse	r24, r1
 1bc:	17 c0       	rjmp	.+46     	; 0x1ec <main+0x130>
					Button_State = bothPressed;
				} else if (buttonIncrease) {
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	81 11       	cpse	r24, r1
 1c2:	14 c0       	rjmp	.+40     	; 0x1ec <main+0x130>
					Button_State = bothPressed;
				} else if (buttonDecrease) {
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	81 11       	cpse	r24, r1
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <main+0x130>
					Button_State = bothPressed;
				} else {
					Button_State = nonePressed;
 1ca:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <main+0x12a>
				}
				break;
			default:
				Button_State = start;
 1d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				break;
		}
		
		switch(Button_State) { // actions
			case start:
				tmpC = 7;
 1d4:	59 83       	std	Y+1, r21	; 0x01
				break;
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <main+0x12a>
			case increaseWait:
			case decreaseWait:
				// do nothing
				break;
			case increasePressed:
				if (tmpC < 9) tmpC++;
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <main+0x12a>
				break;
			case decreasePressed:
				if (tmpC > 0) tmpC--;
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	89 83       	std	Y+1, r24	; 0x01
				tmpC = 0xFF; // should never happen
				break;
		}
		
		// Write to output
		PORTC = tmpC;
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	88 b9       	out	0x08, r24	; 8
	}
 1ea:	80 cf       	rjmp	.-256    	; 0xec <main+0x30>
				break;
			case decreasePressed:
				if (tmpC > 0) tmpC--;
				break;
			case bothPressed:
				tmpC = 0;
 1ec:	19 82       	std	Y+1, r1	; 0x01
				break;
 1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <main+0x12a>

000001f0 <__tablejump2__>:
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	00 24       	eor	r0, r0
 1f6:	00 1c       	adc	r0, r0
 1f8:	0b be       	out	0x3b, r0	; 59
 1fa:	07 90       	elpm	r0, Z+
 1fc:	f6 91       	elpm	r31, Z
 1fe:	e0 2d       	mov	r30, r0
 200:	09 94       	ijmp

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
