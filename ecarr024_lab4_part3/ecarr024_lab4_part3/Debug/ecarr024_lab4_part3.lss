
ecarr024_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000928  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ea  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000418  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046a  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c3  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	bc d0       	rcall	.+376    	; 0x222 <main>
  aa:	23 c1       	rjmp	.+582    	; 0x2f2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <lockSM>:
	releasedPound,
	pressedY,
	unlocked
} Door_State;

void lockSM(unsigned char *tmpB, unsigned char *tmpC, unsigned char buttonX, unsigned char buttonY, unsigned char buttonPound, unsigned char buttonInside) {
  ae:	ef 92       	push	r14
  b0:	0f 93       	push	r16
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	28 97       	sbiw	r28, 0x08	; 8
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
  c6:	9a 83       	std	Y+2, r25	; 0x02
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	7c 83       	std	Y+4, r23	; 0x04
  cc:	6b 83       	std	Y+3, r22	; 0x03
  ce:	4d 83       	std	Y+5, r20	; 0x05
  d0:	2e 83       	std	Y+6, r18	; 0x06
  d2:	0f 83       	std	Y+7, r16	; 0x07
  d4:	e8 86       	std	Y+8, r14	; 0x08
	switch(Door_State) { // transitions
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <lockSM+0x38>
  e4:	3e c0       	rjmp	.+124    	; 0x162 <lockSM+0xb4>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	91 05       	cpc	r25, r1
  ea:	2c f4       	brge	.+10     	; 0xf6 <lockSM+0x48>
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	59 f0       	breq	.+22     	; 0x106 <lockSM+0x58>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	c9 f0       	breq	.+50     	; 0x126 <lockSM+0x78>
  f4:	66 c0       	rjmp	.+204    	; 0x1c2 <lockSM+0x114>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	91 05       	cpc	r25, r1
  fa:	09 f4       	brne	.+2      	; 0xfe <lockSM+0x50>
  fc:	50 c0       	rjmp	.+160    	; 0x19e <lockSM+0xf0>
  fe:	04 97       	sbiw	r24, 0x04	; 4
 100:	09 f4       	brne	.+2      	; 0x104 <lockSM+0x56>
 102:	56 c0       	rjmp	.+172    	; 0x1b0 <lockSM+0x102>
 104:	5e c0       	rjmp	.+188    	; 0x1c2 <lockSM+0x114>
		case locked:
			if (!buttonX && !buttonY && buttonPound) {
 106:	8d 81       	ldd	r24, Y+5	; 0x05
 108:	88 23       	and	r24, r24
 10a:	51 f4       	brne	.+20     	; 0x120 <lockSM+0x72>
 10c:	8e 81       	ldd	r24, Y+6	; 0x06
 10e:	88 23       	and	r24, r24
 110:	39 f4       	brne	.+14     	; 0x120 <lockSM+0x72>
 112:	8f 81       	ldd	r24, Y+7	; 0x07
 114:	88 23       	and	r24, r24
 116:	21 f0       	breq	.+8      	; 0x120 <lockSM+0x72>
				Door_State = pressedPound;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			} else {
				Door_State = locked;
			}
			break;
 11e:	53 c0       	rjmp	.+166    	; 0x1c6 <lockSM+0x118>
	switch(Door_State) { // transitions
		case locked:
			if (!buttonX && !buttonY && buttonPound) {
				Door_State = pressedPound;
			} else {
				Door_State = locked;
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			break;
 124:	50 c0       	rjmp	.+160    	; 0x1c6 <lockSM+0x118>
		case pressedPound:
			if (!buttonX && !buttonY && buttonPound) {
 126:	8d 81       	ldd	r24, Y+5	; 0x05
 128:	88 23       	and	r24, r24
 12a:	51 f4       	brne	.+20     	; 0x140 <lockSM+0x92>
 12c:	8e 81       	ldd	r24, Y+6	; 0x06
 12e:	88 23       	and	r24, r24
 130:	39 f4       	brne	.+14     	; 0x140 <lockSM+0x92>
 132:	8f 81       	ldd	r24, Y+7	; 0x07
 134:	88 23       	and	r24, r24
 136:	21 f0       	breq	.+8      	; 0x140 <lockSM+0x92>
				Door_State = pressedPound;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13e:	10 c0       	rjmp	.+32     	; 0x160 <lockSM+0xb2>
			} else if (!buttonX && !buttonY && !buttonPound) {
 140:	8d 81       	ldd	r24, Y+5	; 0x05
 142:	88 23       	and	r24, r24
 144:	51 f4       	brne	.+20     	; 0x15a <lockSM+0xac>
 146:	8e 81       	ldd	r24, Y+6	; 0x06
 148:	88 23       	and	r24, r24
 14a:	39 f4       	brne	.+14     	; 0x15a <lockSM+0xac>
 14c:	8f 81       	ldd	r24, Y+7	; 0x07
 14e:	88 23       	and	r24, r24
 150:	21 f4       	brne	.+8      	; 0x15a <lockSM+0xac>
				Door_State = releasedPound;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 158:	03 c0       	rjmp	.+6      	; 0x160 <lockSM+0xb2>
			} else {
				Door_State = locked;
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			break;
 15e:	33 c0       	rjmp	.+102    	; 0x1c6 <lockSM+0x118>
 160:	32 c0       	rjmp	.+100    	; 0x1c6 <lockSM+0x118>
		case releasedPound:
			if (!buttonX && !buttonY && !buttonPound) {
 162:	8d 81       	ldd	r24, Y+5	; 0x05
 164:	88 23       	and	r24, r24
 166:	51 f4       	brne	.+20     	; 0x17c <lockSM+0xce>
 168:	8e 81       	ldd	r24, Y+6	; 0x06
 16a:	88 23       	and	r24, r24
 16c:	39 f4       	brne	.+14     	; 0x17c <lockSM+0xce>
 16e:	8f 81       	ldd	r24, Y+7	; 0x07
 170:	88 23       	and	r24, r24
 172:	21 f4       	brne	.+8      	; 0x17c <lockSM+0xce>
				Door_State = releasedPound;
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 17a:	10 c0       	rjmp	.+32     	; 0x19c <lockSM+0xee>
			} else if (!buttonX && buttonY && !buttonPound) {
 17c:	8d 81       	ldd	r24, Y+5	; 0x05
 17e:	88 23       	and	r24, r24
 180:	51 f4       	brne	.+20     	; 0x196 <lockSM+0xe8>
 182:	8e 81       	ldd	r24, Y+6	; 0x06
 184:	88 23       	and	r24, r24
 186:	39 f0       	breq	.+14     	; 0x196 <lockSM+0xe8>
 188:	8f 81       	ldd	r24, Y+7	; 0x07
 18a:	88 23       	and	r24, r24
 18c:	21 f4       	brne	.+8      	; 0x196 <lockSM+0xe8>
				Door_State = pressedY;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 194:	03 c0       	rjmp	.+6      	; 0x19c <lockSM+0xee>
			} else {
				Door_State = locked;
 196:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			break;
 19a:	15 c0       	rjmp	.+42     	; 0x1c6 <lockSM+0x118>
 19c:	14 c0       	rjmp	.+40     	; 0x1c6 <lockSM+0x118>
		case pressedY:
			Door_State = buttonInside ? locked : unlocked;
 19e:	88 85       	ldd	r24, Y+8	; 0x08
 1a0:	88 23       	and	r24, r24
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <lockSM+0xfa>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <lockSM+0xfc>
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <lockSM+0x118>
		case unlocked:
			Door_State = buttonInside ? locked : unlocked;
 1b0:	88 85       	ldd	r24, Y+8	; 0x08
 1b2:	88 23       	and	r24, r24
 1b4:	11 f0       	breq	.+4      	; 0x1ba <lockSM+0x10c>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <lockSM+0x10e>
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <lockSM+0x118>
		default:
			Door_State = locked;
 1c2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	*tmpC = Door_State;
 1c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1ca:	8b 81       	ldd	r24, Y+3	; 0x03
 1cc:	9c 81       	ldd	r25, Y+4	; 0x04
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
	
	switch (Door_State) { // actions
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	99 23       	and	r25, r25
 1dc:	8c f0       	brlt	.+34     	; 0x200 <lockSM+0x152>
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	91 05       	cpc	r25, r1
 1e2:	1c f0       	brlt	.+6      	; 0x1ea <lockSM+0x13c>
 1e4:	04 97       	sbiw	r24, 0x04	; 4
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <lockSM+0x146>
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <lockSM+0x152>
		case locked:
		case pressedPound:
		case releasedPound:
		case pressedY:
			*tmpB = 0;
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	9a 81       	ldd	r25, Y+2	; 0x02
 1ee:	fc 01       	movw	r30, r24
 1f0:	10 82       	st	Z, r1
			break;
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <lockSM+0x15c>
		case unlocked:
			*tmpB = 1;
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
			break;
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <lockSM+0x15c>
		default:
			*tmpB = 0;
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	fc 01       	movw	r30, r24
 206:	10 82       	st	Z, r1
			break;
 208:	00 00       	nop
	}
	return;
 20a:	00 00       	nop
}
 20c:	28 96       	adiw	r28, 0x08	; 8
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	0f 91       	pop	r16
 21e:	ef 90       	pop	r14
 220:	08 95       	ret

00000222 <main>:

int main(void)
{
 222:	ef 92       	push	r14
 224:	0f 93       	push	r16
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	00 d0       	rcall	.+0      	; 0x22c <main+0xa>
 22c:	00 d0       	rcall	.+0      	; 0x22e <main+0xc>
 22e:	00 d0       	rcall	.+0      	; 0x230 <main+0xe>
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // A input
 234:	81 e2       	ldi	r24, 0x21	; 33
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	10 82       	st	Z, r1
 23c:	82 e2       	ldi	r24, 0x22	; 34
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // B output
 246:	84 e2       	ldi	r24, 0x24	; 36
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00; // C output
 258:	87 e2       	ldi	r24, 0x27	; 39
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
 262:	88 e2       	ldi	r24, 0x28	; 40
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	10 82       	st	Z, r1
	
	unsigned char buttonX = 0x00;
 26a:	19 82       	std	Y+1, r1	; 0x01
	unsigned char buttonY = 0x00;
 26c:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char buttonPound = 0x00;
 26e:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char buttonInside = 0x00;
 270:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char tmpB = 0x00;
 272:	1d 82       	std	Y+5, r1	; 0x05
	unsigned char tmpC = 0x00;
 274:	1e 82       	std	Y+6, r1	; 0x06
    
    while (1) 
    {
		buttonX = PINA & 0x01;
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	80 81       	ld	r24, Z
 27e:	81 70       	andi	r24, 0x01	; 1
 280:	89 83       	std	Y+1, r24	; 0x01
		buttonY = (PINA & 0x02) >> 1;
 282:	80 e2       	ldi	r24, 0x20	; 32
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fc 01       	movw	r30, r24
 288:	80 81       	ld	r24, Z
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	82 70       	andi	r24, 0x02	; 2
 290:	99 27       	eor	r25, r25
 292:	95 95       	asr	r25
 294:	87 95       	ror	r24
 296:	8a 83       	std	Y+2, r24	; 0x02
		buttonPound = (PINA & 0x04) >> 2;
 298:	80 e2       	ldi	r24, 0x20	; 32
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	80 81       	ld	r24, Z
 2a0:	88 2f       	mov	r24, r24
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	84 70       	andi	r24, 0x04	; 4
 2a6:	99 27       	eor	r25, r25
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	95 95       	asr	r25
 2ae:	87 95       	ror	r24
 2b0:	8b 83       	std	Y+3, r24	; 0x03
		buttonInside = (PINA & 0x80) >> 7;
 2b2:	80 e2       	ldi	r24, 0x20	; 32
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	88 1f       	adc	r24, r24
 2bc:	88 27       	eor	r24, r24
 2be:	88 1f       	adc	r24, r24
 2c0:	8c 83       	std	Y+4, r24	; 0x04
		tmpB = 0x00;
 2c2:	1d 82       	std	Y+5, r1	; 0x05
		tmpC = 0xFF;
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	8e 83       	std	Y+6, r24	; 0x06
		
		lockSM(&tmpB, &tmpC, buttonX, buttonY, buttonPound, buttonInside);
 2c8:	be 01       	movw	r22, r28
 2ca:	6a 5f       	subi	r22, 0xFA	; 250
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	ce 01       	movw	r24, r28
 2d0:	05 96       	adiw	r24, 0x05	; 5
 2d2:	ec 80       	ldd	r14, Y+4	; 0x04
 2d4:	0b 81       	ldd	r16, Y+3	; 0x03
 2d6:	2a 81       	ldd	r18, Y+2	; 0x02
 2d8:	49 81       	ldd	r20, Y+1	; 0x01
 2da:	e9 de       	rcall	.-558    	; 0xae <lockSM>
		
		PORTB = tmpB;
 2dc:	85 e2       	ldi	r24, 0x25	; 37
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	2d 81       	ldd	r18, Y+5	; 0x05
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
		PORTC = tmpC;
 2e6:	88 e2       	ldi	r24, 0x28	; 40
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	2e 81       	ldd	r18, Y+6	; 0x06
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
    }
 2f0:	c2 cf       	rjmp	.-124    	; 0x276 <main+0x54>

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
